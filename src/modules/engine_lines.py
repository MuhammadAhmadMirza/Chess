'''a tool to easily store and access engine analysis lines'''

class EngineLine:
    """
    Represents a line of analysis generated by the chess engine.

    Attributes:
        index (int): The index of the line.
        line (list): List of moves in SAN (Standard Algebraic Notation) format.
        eval_score (float): Evaluation score of the line.
    """

    def __init__(self, index: int, line: list, eval_score: any):
        """
        Initialize an EngineLine object.

        Args:
            index (int): The index of the line.
            line (list): List of moves in SAN format.
            eval_score: Evaluation score of the line.
        """
        self.index = index
        self.line = line
        self.eval = str(eval_score)

    def __str__(self):
        """
        Return a string representation of the EngineLine object.

        Returns:
            str: A string representation of the EngineLine object.
        """
        return f"Line {self.index}: {', '.join(self.line)}, Eval: {self.eval_score}"

    def __repr__(self):
        """
        Return a string representation of the EngineLine object.

        Returns:
            str: A string representation of the EngineLine object.
        """
        return f"Line {self.index}: {', '.join(self.line)}, Eval: {self.eval_score}"

    def __len__(self):
        """
        Return the number of moves in the line.

        Returns:
            int: The number of moves in the line.
        """
        return len(self.line)

    def __getitem__(self, item):
        """
        Get the move at the specified index.

        Args:
            item (int): The index of the move.

        Returns:
            str: The move at the specified index.
        """
        return self.line[item]

    def __iter__(self):
        """
        Iterator to iterate over the moves in the line.

        Returns:
            iterator: An iterator to iterate over the moves in the line.
        """
        return iter(self.line)
    
    def __delattr__(self, name: str) -> None:
        """
        Delete the specified attribute.

        Args:
            name (str): The name of the attribute to be deleted.
        """
        if name == "line":
            raise AttributeError("Cannot delete 'line' attribute directly. Use a method to remove moves from the line.")
        else:
            super().__delattr__(name)
    
    def remove_move(self, move_index: int) -> None:
        """
        Remove the move at the specified index from the line.

        Args:
            move_index (int): The index of the move to be removed.
        """
        del self.line[move_index]
        
    def get_single_string(self) -> str:
        """
        Get the line as a single string.

        Returns:
            str: The line as a single string.
        """
        return ", ".join(self.line)